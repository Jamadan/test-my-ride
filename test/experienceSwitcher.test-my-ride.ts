// Generated by test-my-ride
// Please update mock valies and tests to appropriate logic

import { mockFunctions, setMockValue } from 'mock-my-ride';

mockFunctions(require('storageUtils'));
mockFunctions(require('package/lib/index'));
mockFunctions(require('../shared/constants'));
mockFunctions(require('../shared/enums'));
mockFunctions(require('../shared/entities/locations'));
mockFunctions(require('../shared/scopes'));
import { cookies } from 'storageUtils';
import { Jams } from 'package/lib/index';
import { SCOPES_COOKIE } from '../shared/constants';
import TabType from '../shared/enums';
import { PlatesDict } from '../shared/entities/locations';
import { getScopesFromQuery } from '../shared/scopes';

import * as subjectUnderTest from './experienceSwitcher';

describe('CODE', () => {
  it('returns true', () => {
    expect(subjectUnderTest.CODE()).toEqual(true);
  });
});
describe('setDS', () => {
  it('returns true when cookies, SCOPES_COOKIE is true', () => {
    setMockValue(cookies, true);
    setMockValue(SCOPES_COOKIE, true);
    expect(subjectUnderTest.setDS()).toEqual(true);
  });
});
describe('getCurrentJam', () => {
  it('returns true when PlatesDict, TabType, Jams is true', () => {
    setMockValue(PlatesDict, true);
    setMockValue(TabType, true);
    setMockValue(Jams, true);
    expect(subjectUnderTest.getCurrentJam()).toEqual(true);
  });
});
describe('getScopesCookie', () => {
  it('returns true when cookies, SCOPES_COOKIE, getScopesFromQuery is true', () => {
    setMockValue(cookies, true);
    setMockValue(SCOPES_COOKIE, true);
    setMockValue(getScopesFromQuery, true);
    expect(subjectUnderTest.getScopesCookie()).toEqual(true);
  });
});
describe('isRaspberryOrDamson', () => {
  it('returns true when PlatesDict, Jams, TabType is true', () => {
    setMockValue(PlatesDict, true);
    setMockValue(Jams, true);
    setMockValue(TabType, true);
    expect(subjectUnderTest.isRaspberryOrDamson()).toEqual(true);
  });
});
describe('isDamson', () => {
  it('returns true when PlatesDict, Jams, TabType is true', () => {
    setMockValue(PlatesDict, true);
    setMockValue(Jams, true);
    setMockValue(TabType, true);
    expect(subjectUnderTest.isDamson()).toEqual(true);
  });
});
describe('isPlumOrStrawberry', () => {
  it('returns true when PlatesDict, Jams, TabType is true', () => {
    setMockValue(PlatesDict, true);
    setMockValue(Jams, true);
    setMockValue(TabType, true);
    expect(subjectUnderTest.isPlumOrStrawberry()).toEqual(true);
  });
});
